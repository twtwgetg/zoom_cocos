// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: general-vs:vert # builtin header
      frag: weather-bg-fs:frag
      properties: &props
        mainTexture: { value: white }
        tintColor: { value: [1, 1, 1, 1], editor: { type: color } }
        hueShift: { value: 0.0, editor: { range: [-180, 180] } }
        saturation: { value: 1.0, editor: { range: [0, 2] } }
        brightness: { value: 1.0, editor: { range: [0, 2] } }
        weatherIntensity: { value: 0.0, editor: { range: [0, 1] } }
  - name: transparent
    passes:
    - vert: general-vs:vert # builtin header
      frag: weather-bg-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram weather-bg-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>
  
  in vec2 v_uv;
  in vec3 v_position;
  
  uniform sampler2D mainTexture;
  
  uniform Constant {
    vec4 tintColor;
    float hueShift;
    float saturation;
    float brightness;
    float weatherIntensity;
  };
  
  vec3 rgb2hsv(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
    
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
  }
  
  vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
  }
  
  vec4 frag () {
    vec4 o = texture(mainTexture, v_uv);
    
    // Apply hue shift
    vec3 hsv = rgb2hsv(o.rgb);
    hsv.x = fract(hsv.x + hueShift / 360.0);
    hsv.y *= saturation;
    o.rgb = hsv2rgb(hsv);
    
    // Apply brightness
    o.rgb *= brightness;
    
    // Apply weather effect
    if (weatherIntensity > 0.0) {
      float gray = dot(o.rgb, vec3(0.299, 0.587, 0.114));
      o.rgb = mix(o.rgb, vec3(gray), weatherIntensity * 0.6);
      o.rgb = mix(o.rgb, o.rgb * vec3(0.8, 0.85, 0.95), weatherIntensity * 0.5);
      o.rgb *= mix(1.0, 0.8, weatherIntensity * 0.7);
    }
    
    o *= tintColor;
    
    // Ensure proper alpha handling for UI
    o.a *= tintColor.a;
    
    CC_APPLY_FOG(o, v_position);
    return CCFragOutput(o);
  }
}%